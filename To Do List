To do list where you can prioritize between low, medium, and high task and check them off as you complete them.
There is a Deadline section where you can input the due date and a Project Planning where you can input a due date if needed.




<--HTML-->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Calendar To-Do List</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  
  <body>
    <div class="container">
      <h1>To-Do</h1>
      <div id="weekOf">The Week Of: <span id="weekOfDate"></span></div>
      <div id="calendar" class="calendar"></div>
    </div>
   <div class="container">
    <div class="sidebar">
      <div class="deadline-list">
        <h2>Deadline List</h2>
        <div class="task-deadline">
          <input type="text" placeholder="Task Description">
          <input type="date" placeholder="Due Date">
          <select>
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
          <button>Add Task</button>
        </div>
        <div class="tasks-container"></div>
      </div>
      <div class="project-planning">
        <h2>Project Planning</h2>
        <div class="project">
          <input type="text" placeholder="Project Name">
          <input type="date" placeholder="Project Deadline">
          <button>Create Project</button>
          <div class="project-tasks"></div>

    </div>
    <script src="script.js"></script>
    
  </body>
</html>


<--CSS-->
<style>
    body {
      font-family: Arial, sans-serif;
      background-color: #262626;
      color: #333;
      margin: 0;
      padding: 0;
      color: #efb8e2;
    }

    .container {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      background-color: #2c3e50;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .calendar {
      display: grid;
      grid-template-columns: 1fr; /* Set grid to one column for vertical layout */
      gap: 2px;
      margin-bottom: 20px;
      border: dotted 3px;
    }

    .day {
      background-color: #d3eefd;
      padding: 10px;
      border: 1px solid #d3a6c8;
      text-align: center;
      margin-bottom: 2px; /* Add margin between days */
      border: dotted 3px;
    }

    .task-section {
      padding: 10px;
      border: 1px solid #d17cb6;
      margin-bottom: 10px;
    }
    button {
         padding: 10px;
  background-color: #efb8e2;
  color: #262626;
  border: none;
  border-radius: 5px;
  cursor: pointer;
    }
    button:hover {
  background-color: #d17cb6;
  border: 2px dotted;
    }
    h1 {
      text-align: center;
    }
    #weekOf {
      text-align: right;
    }
    .sidebar {
  flex: 1;
  padding: 20px;
  background-color: #2c3e50;
  border-radius: 5px;
}

.sidebar h2 {
  color: #efb8e2;
  border: 
}

.deadline-list,
.project-planning {
  background-color: #f9f9f9;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 5px;
  
}

.task-deadline,
.project {
  margin-bottom: 10px;
}

.task-deadline input,
.task-deadline select,
.project input {
  display: block;
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
}

.task-deadline button,
.project button {
  padding: 10px;
  background-color: #efb8e2;
  color: #262626;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.task-deadline button:hover,
.project button:hover {
  background-color: #d17cb6;
  border: 2px dotted;
}

.content {
  flex: 3;
  padding: 20px;
}



<--JavaScript-->

      document.addEventListener("DOMContentLoaded", function() {
  const calendar = document.getElementById("calendar");
  const weekOfDate = document.getElementById("weekOfDate");

  // Create the calendar layout
  const daysOfWeek = [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ];

  // Get the current date
  const currentDate = new Date();
  const currentDay = currentDate.getDate();
  const currentMonth = currentDate.getMonth() + 1;
  const currentYear = currentDate.getFullYear();

  // Display the week of
  weekOfDate.textContent = `${currentMonth}/${currentDay}/${currentYear}`;

  // Function to handle adding tasks
  function addTask(dayElement) {
    const taskSection = dayElement.querySelector(".task-section");
    const taskTextarea = taskSection.querySelector("textarea");
    const taskDescription = taskTextarea.value.trim();

    if (taskDescription !== "") {
      const taskItem = document.createElement("div");
      taskItem.classList.add("task-item");
      taskItem.innerHTML = `
        <input type="checkbox">
        <span>${taskDescription}</span>
        <select>
          <option value="low">Low</option>
          <option value="medium">Medium</option>
          <option value="high">High</option>
        </select>
      `;

      const taskCheckbox = taskItem.querySelector('input[type="checkbox"]');
      taskCheckbox.addEventListener("change", function() {
        if (this.checked) {
          taskItem.classList.add("completed");
        } else {
          taskItem.classList.remove("completed");
        }
      });

      dayElement.appendChild(taskItem);
      taskTextarea.value = ""; // Clear the textarea after adding the task
    }
  }

  // Create the calendar layout
  daysOfWeek.forEach((day) => {
    const dayElement = document.createElement("div");
    dayElement.classList.add("day");
    dayElement.textContent = day;

    const taskSection = document.createElement("div");
    taskSection.classList.add("task-section");
    taskSection.innerHTML = `
      <h3>${day}</h3>
      <textarea placeholder="Add task for ${day}"></textarea>
      <button class="add-task-btn">Add Task</button>
    `;
    
    dayElement.appendChild(taskSection);

    dayElement.setAttribute("ondrop", "drop(event)");
    dayElement.setAttribute("ondragover", "allowDrop(event)");

    const addTaskBtn = taskSection.querySelector(".add-task-btn");
    addTaskBtn.addEventListener("click", () => {
      addTask(dayElement);
    });

    calendar.appendChild(dayElement);
  });
  
  // Functionality for adding tasks in the Deadline List
  const addDeadlineTask = () => {
    const taskDescription = document.querySelector('.task-deadline input[type="text"]').value;
    const dueDate = document.querySelector('.task-deadline input[type="date"]').value;
    const priority = document.querySelector('.task-deadline select').value;

    const taskElement = document.createElement('div');
    taskElement.textContent = `${taskDescription} - Due: ${dueDate} - Priority: ${priority}`;
    document.querySelector('.tasks-container').appendChild(taskElement);
  };

  // Functionality for creating projects in the Project Planning section
  const createProject = () => {
    const projectName = document.querySelector('.project input[type="text"]').value;
    const projectDeadline = document.querySelector('.project input[type="date"]').value;

    const projectElement = document.createElement('div');
    projectElement.textContent = `${projectName} - Deadline: ${projectDeadline}`;
    document.querySelector('.project-tasks').appendChild(projectElement);
  };

  // Event listeners for adding tasks and creating projects
  document.querySelector('.task-deadline button').addEventListener('click', addDeadlineTask);
  document.querySelector('.project button').addEventListener('click', createProject);
});

      
    
