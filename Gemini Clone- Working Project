<!--HTML-->
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gemini Clone</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>




{/* App.jsx */}

import Sidebar from "./assets/components/sidebar/sidebar";
import Main from "./assets/components/main/main";

const App = () => {
  return (
    <>
      <Sidebar />
      <Main />
    </>
  );
};

export default App;

{/* Main.jsx */}
import { useContext } from "react";
import "./Main.css";
import { assets } from "../../assets/assets";
import { Context } from "../../../../content/Context";

const Main = () => {
  const {
    onSent,
    recentPrompt,
    showResult,
    loading,
    resultData,
    setInput,
    input,
  } = useContext(Context);

  return (
    <div className="main">
      <div className="nav">
        <p>Gemini</p>
        <img src={assets.user_icon} alt="User Icon" />
      </div>
      <div className="main-container">
        {!showResult ? (
          <>
            <div className="greet">
              <p>
                <span>Hello, Stephanie</span>
              </p>
              <p>How can I help you today?</p>
            </div>
            <div className="cards">
              <div className="card">
                <p>Suggest beautiful places to see on an upcoming road trip</p>
                <img src={assets.compass_icon} alt="Compass Icon" />
              </div>
              <div className="card">
                <p>Briefly summarize this concept: epigenetics</p>
                <img src={assets.bulb_icon} alt="Bulb Icon" />
              </div>
              <div className="card">
                <p>Brainstorm team bonding activities for our work retreat</p>
                <img src={assets.message_icon} alt="Message Icon" />
              </div>
              <div className="card">
                <p>Improve the readability of the following code</p>
                <img src={assets.code_icon} alt="Code Icon" />
                <p>{recentPrompt}</p>
              </div>
            </div>
          </>
        ) : (
          <div className="result">
            <div className="result-title">
              <img src={assets.user_icon} alt="User Icon" />
            </div>
            <div className="result-data">
              <img src={assets.gemini_icon} alt="Gemini Icon" />
              {loading ? (
                <div className="loader">
                  <hr />
                  <hr />
                  <hr />
                </div>
              ) : (
                <p dangerouslySetInnerHTML={{ __html: resultData }}></p>
              )}
            </div>
          </div>
        )}
        <div className="main-bottom">
          <div className="search-box">
            <input
              onChange={(e) => setInput(e.target.value)}
              value={input}
              type="text"
              placeholder="Enter a prompt here"
            />
            <div>
              <img src={assets.gallery_icon} alt="Gallery Icon" />
              <img src={assets.mic_icon} alt="Mic Icon" />
              {input && (
                <img
                  onClick={() => onSent(input)} // Pass the input to the onSent function
                  src={assets.send_icon}
                  alt="Send Icon"
                />
              )}
            </div>
          </div>
          <p className="bottom-info">
            Gemini may display inaccurate info, including about people, so
            double check its responses. Your privacy and Gemini Apps
          </p>
        </div>
      </div>
    </div>
  );
};

export default Main;

{/* Gemini.jsx  Work in progress*/}
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

// Use the correct apiKey from the environment variable
const apiKey = process.env.REACT_APP_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const safetySettings = [
  {
    category: HarmCategory.HARM_CATEGORY_HARASSMENT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
  },
];

async function runChat(prompt) {
  try {
    const chatSession = model.startChat({
      generationConfig,
      safetySettings,
      history: [],
    });

    const result = await chatSession.sendMessage(prompt);
    const response = result.response;
    console.log(response.text());
    return response.text();
  } catch (error) {
    console.error("Error running chat:", error);
    throw error;
  }
}

export default runChat;


{/* Context.jsx */}
// eslint-disable-next-line no-unused-vars
import React, { createContext, useState } from "react";
import PropTypes from "prop-types"; // Import PropTypes
import runChat from "../config/gemini";

export const Context = createContext();

const ContextProvider = ({ children }) => {
  // Destructure children directly
  const [input, setInput] = useState("");
  const [recentPrompt, setRecentPrompt] = useState("");
  const [prevPrompts, setPrevPrompts] = useState([]);
  const [showResult, setShowResult] = useState(false);
  const [loading, setLoading] = useState(false);
  const [resultData, setResultData] = useState("");

  const delayPara = (index, nextWord) => {
    setTimeout(() => {
      setResultData((prev) => prev + nextWord);
    }, 75 * index);
  };

  const newChat = () => {
    setLoading(false);
    setShowResult(false);
  };

  const onSent = async (prompt) => {
    setResultData("");
    setLoading(true);
    setShowResult(true);

    let response;
    if (prompt !== undefined) {
      response = await runChat(prompt);
      setRecentPrompt(prompt);
    } else {
      setPrevPrompts((prev) => [...prev, input]);
      setRecentPrompt(input);
      response = await runChat(input);
    }

    let responseArray = response.split("**");
    let newResponse = "";
    for (let i = 0; i < responseArray.length; i++) {
      if (i === 0 || i % 2 !== 1) {
        newResponse += responseArray[i];
      } else {
        newResponse += "<b>" + responseArray[i] + "</b>";
      }
    }

    let newResponse2 = newResponse.split("*").join("</br>");
    let newResponseArray = newResponse2.split(" ");
    for (let i = 0; i < newResponseArray.length; i++) {
      const nextWord = newResponseArray[i];
      delayPara(i, nextWord + " ");
    }

    setLoading(false);
    setInput("");
  };

  const contextValue = {
    prevPrompts,
    setPrevPrompts,
    onSent,
    setRecentPrompt,
    recentPrompt,
    showResult,
    loading,
    resultData,
    input,
    setInput,
    newChat,
  };

  return (
    <Context.Provider value={contextValue}>{children}</Context.Provider> // Use children directly
  );
};

// Prop types validation
ContextProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

export default ContextProvider;

{/* Sidebar.jsx */}
// eslint-disable-next-line no-unused-vars
import React, { createContext, useState } from "react";
import PropTypes from "prop-types"; // Import PropTypes
import runChat from "../config/gemini";

export const Context = createContext();

const ContextProvider = (props) => {
  const [input, setInput] = useState("");
  const [recentPrompt, setRecentPrompt] = useState("");
  const [prevPrompts, setPrevPrompts] = useState([]);
  const [showResult, setShowResult] = useState(false);
  const [loading, setLoading] = useState(false);
  const [resultData, setResultData] = useState("");

  const delayPara = (index, nextWord) => {
    setTimeout(() => {
      setResultData((prev) => prev + nextWord);
    }, 75 * index);
  };

  const newChat = () => {
    setLoading(false);
    setShowResult(false);
  };

  const onSent = async (prompt) => {
    setResultData("");
    setLoading(true);
    setShowResult(true);

    let response;
    if (prompt !== undefined) {
      response = await runChat(prompt);
      setRecentPrompt(prompt);
    } else {
      setPrevPrompts((prev) => [...prev, input]);
      setRecentPrompt(input);
      response = await runChat(input);
    }

    let responseArray = response.split("**");
    let newResponse = "";
    for (let i = 0; i < responseArray.length; i++) {
      if (i === 0 || i % 2 !== 1) {
        newResponse += responseArray[i];
      } else {
        newResponse += "<b>" + responseArray[i] + "</b>";
      }
    }

    let newResponse2 = newResponse.split("*").join("</br>");
    let newResponseArray = newResponse2.split(" ");
    for (let i = 0; i < newResponseArray.length; i++) {
      const nextWord = newResponseArray[i];
      delayPara(i, nextWord + " ");
    }

    setLoading(false);
    setInput("");
  };

  const contextValue = {
    prevPrompts,
    setPrevPrompts,
    onSent,
    setRecentPrompt,
    recentPrompt,
    showResult,
    loading,
    resultData,
    input,
    setInput,
    newChat,
  };

  return (
    <Context.Provider value={contextValue}>{props.children}</Context.Provider>
  );
};

// Prop types validation
ContextProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

export default ContextProvider;


/* index.css */
@import url("https://fonts.googleapis.com/css2?family=Caveat&family=Lacquer&family=Outfit:wght@100..900&family=PT+Mono&display=swap");

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: Outfit;
}
#root {
  min-height: 100vh;
  display: flex;
  animation: fadeIn 1.5s;
}
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* Main.css */
.main {
  flex: 1;
  min-height: 100vh;
  padding-bottom: 15vh;
  position: relative;
}

.main .nav {
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 22px;
  padding: 20px;
  color: #585858;
}

.main .nav img {
  width: 40px;
  border-radius: 50%;
}

.main-container {
  max-width: 900px;
  margin: auto;
}

.main .greet {
  margin: 50px 0px;
  font-size: 56px;
  color: #c4c7c5;
  font-weight: 500;
  padding: 20px;
}

.main .greet span {
  background: -webkit-linear-gradient(16deg, #4b90ff, #ff5546);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.main .cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 15px;
  padding: 20px;
}

.main .card {
  height: 200px;
  padding: 15px;
  background-color: #f0f4f9;
  border-radius: 10px;
  position: relative;
  cursor: pointer;
}

.main .card img {
  width: 35px;
  padding: 5px;
  position: absolute;
  background-color: white;
  border-radius: 20px;
  bottom: 10px;
  right: 10px;
}

.main .card p {
  color: #585858;
  font-size: 17px;
}

.main .card:hover {
  background-color: #dfe4ea;
}

.main-bottom {
  position: absolute;
  bottom: 0;
  width: 100%;
  max-width: 900px;
  padding: 0px 20px;
  margin: auto;
}

.search-box {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 20px;
  background-color: #f0f4f9;
  padding: 10px 20px;
  border-radius: 50px;
}

.search-box img {
  width: 24px;
  cursor: pointer;
}

.search-box input {
  flex: 1;
  background: transparent;
  border: none;
  outline: none;
  padding: 8px;
  font-size: 18px;
}

.search-box div {
  display: flex;
  align-items: center;
  gap: 15px;
}
.main .bottom-info {
  font-size: 13px;
  margin: 15px auto;
  text-align: center;
}

.result {
  padding: 0px 5%;
  max-height: 70vh;
  overflow-y: scroll;
}

.result::-webkit-scrollbar {
  display: none;
}
.result-title {
  margin: 40px 0px;
  display: flex;
  align-items: center;
  gap: 20px;
}

.result img {
  width: 40px;
  border-radius: 50%;
}
.result-data {
  display: flex;
  align-items: start;
  gap: 20px;
}
.loader {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 10px;
}
.loader hr {
  border-radius: 4px;
  border: none;
  background-color: #f6f7f8;
  background: linear-gradient(to right, #9ed7ff, #fff, #9ed7ff);
  background-size: 800px 50px;
  height: 20px;
  animation: loader 3s infinite linear;
}
@keyframes loader {
  0% {
    background-position: -800px;
  }
  100% {
    background-position: 800px 0px;
  }
}
.result-data p {
  font-size: 17px;
  font-weight: 300;
  line-height: 1.8;
}

@media (max-width: 600px) {
  .main-bottom input {
    flex: none;
    width: 150px;
  }
  .main-bottom img {
    wdith: 20px;
  }
  .search-box {
    padding: 5px 10px;
  }
  .search-box div {
    gap: 5px;
  }
}

/* Sidebar.css */
